FORMULA: N*N-1/2

BRUTEFORCE:
TC: O(N2)
SC: O(N)

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int n = nums.length;
        int count = 0;
        for(int i=0; i<n-1; i++){
            for(int j=i+1; j<n; j++){
                if(nums[i]==nums[j]){
                    count++;
                }
            }
        }
        return count;
    }
}


OPTIMIZED USING SPACE
TC: O(N)
SC: O(N)

HASHMAP:
class Solution {
    public int numIdenticalPairs(int[] nums) {
        HashMap<Integer,Integer> hm = new HashMap<>();
        int n = nums.length;
        for(int i=0; i<n; i++){
            if(!hm.containsKey(nums[i])){
                hm.put(nums[i],1);
            }else{
                int val=hm.get(nums[i]);
                val++;
                hm.put(nums[i],val);
            }
        }
        int ans = 0;
        for(Integer num:hm.keySet()) {
            int value = hm.get(num);
            ans+= value*(value-1)/2;
        }
        return ans;
    }
}


