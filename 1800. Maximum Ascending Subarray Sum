Example 1:

Input: nums = [10,20,30,5,10,50]
Output: 65
Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.
Example 2:

Input: nums = [10,20,30,40,50]
Output: 150
Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.
Example 3:

Input: nums = [12,17,15,13,10,11,12]
Output: 33
Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.

TC=O(N)
SC=O(1)

class Solution {
    public int maxAscendingSum(int[] nums) {
        int n = nums.length;
        int maxsum=nums[0];
        int currsum=nums[0];
        int i=1;
        while(i<n){
            if(nums[i]>nums[i-1]){
                currsum+=nums[i];
            }
            else{
                maxsum = Math.max(maxsum,currsum);
                currsum = nums[i];
            }
            i++;
        }
        maxsum = Math.max(maxsum,currsum);
        return maxsum;
    }
}
