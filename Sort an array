MERGE SORT

TC = O(NLOGN)
SC = O(N)


class Solution {
    public int[] sortArray(int[] nums) {
        int n = nums.length;
        int[] finalarr = new int[n];
        int s=0;
        int e=n-1;
        finalarr = mergeSort(nums,s,e);
        return finalarr;
    }

    public int[] mergeSort(int[] arr, int s, int e){
        if(s==e){
            return arr;
        }
        int m = (s+e)/2;
        mergeSort(arr,s,m);
        mergeSort(arr,m+1,e);
        merge(arr,s,m,e);
        return arr;
    }

    public int[] merge(int[] arr, int s, int m, int e){
        int[] ans = new int[e-s+1];
        int p1=s;
        int p2=m+1;
        int k=0;
        while(p1<=m && p2<=e){
            if(arr[p1]<arr[p2]){
                ans[k]=arr[p1];
                p1++;
                k++;
            }
            else{
                ans[k]=arr[p2];
                p2++;
                k++;
            }
        }
        while(p1<=m){
            ans[k]=arr[p1];
            p1++;
            k++;
        }
        while(p2<=e){
            ans[k]=arr[p2];
            p2++;
            k++;
        }
        
        for(int i=0; i<ans.length; i++){
            arr[i+s]=ans[i];
        }
        return arr;
    }
}
