Approach 1: Bitwise XOR

TC O(N)
SC O(1)

public char findTheDifference(String s, String t) {
    int i = 0, result = 0;
    while (i < s.length()) {
        result ^= t.charAt(i) ^ s.charAt(i);
        i++;
    }
    if (i < t.length())
        result ^= t.charAt(i);
    return (char) result;
}



Approach 2: Sum of Characters (Fastest)

TC O(N)
SC O(1)

class Solution {
    public char findTheDifference(String s, String t) {
        int num = 0;
        for(int ch : t.toCharArray()) {
            num += ch;
        }
        for(int ch : s.toCharArray()) {
            num -= ch;
        }
        return (char) (num);
    }
}




Approach 3: HashMap

TC O(N+M) N->LENGTH OF S, M->LENGTH OF T
SC O(N)

public char findTheDifference(String s, String t) {
    HashMap<Character, Integer> charCountMap = new HashMap<>();
    for (int i = 0; i < t.length(); i++) {
        char currentChar = t.charAt(i);
        charCountMap.put(currentChar, charCountMap.getOrDefault(currentChar, 0) + 1);
    }
    char result = t.charAt(0);
    for (int i = 0; i < s.length(); i++) {
        char currentChar = s.charAt(i);
        if (charCountMap.containsKey(currentChar)) {
            charCountMap.put(currentChar, charCountMap.get(currentChar) - 1);
        }
    }
    for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
        if (entry.getValue() != 0)
            result = entry.getKey();
    }
    return result;
}

